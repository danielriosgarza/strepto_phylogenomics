#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Dec  2 13:43:32 2019

@author: meike
"""

'''Species comparison to check if one misses and check if it is reasonably left out'''

from fuzzywuzzy import process

def compare(str2Match, strOptions):
    '''Give query string that is compared to other strings in a list. Returns list with tuples of string 
    and similarity score between 0 and 100. Example: [('Streptococcus sobrinus', 100), (...)]'''
    score_l = []
    scores = process.extract(str2Match, strOptions, limit = len(strOptions))
    for score in scores:
        if score[1] >= 95:
            score_l.append(score[0])
    return score_l
            
species_l =[]
with open ('/home/meike/strepto_phylogenomics/files/strepto_genomes_quality.tsv') as f:
    for line in f:
        line = line.strip().split('\t')
        if line[0].startswith('genome.genome_id'):
            species_i = line.index('genome.species')
        else:
            species_l.append(line[species_i])

species_all_scores ={}
for name in species_l:      #make dict with species name as key and all scores higher than 95 as values
    if name not in species_all_scores:
        species_all_scores[name] = compare(name, species_l)
        
species={}
for k,v in species_all_scores.items(): #use all scores to make dict that contains all possible writing styles of a species 
    for synonym in v:
        if synonym not in species:
            species[synonym] = k  #gives all same value/writing style
print(species)

#similar_species ={}
#for item in species_l:
#    if item not in similar_species:
#        similar_species[item]= item
#    else:
#        str2Match = item
#        sim = process.extract(str2Match, species_l, limit = len(species_l))
#        for scores in sim:
#            if scores[1] >= 95 and item != scores[0]:
#                similar_species[item] = similar_species[item] + scores[0]
#print(similar_species)
#
#
#sim = process.extract(species_l[0], species_l[:100], limit = len(species_l))
#temp={}
#for scores in sim:
#    if scores[1] >= 80:
#        temp.append(scores)
#print(temp)
#
#print(sim[:10])  
    

strOptions = ['Organs','organs', 'organisms']
highest = process.extractBests('Organs',strOptions)
#highest = process.extractOne('Organs',strOptions)
print (highest)